% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col.aggr.R
\name{col.aggr}
\alias{col.aggr}
\title{col.aggr}
\usage{
col.aggr(Out, In, Out.names, In.names, FUN, Remove = TRUE, Coerce = FALSE)
}
\arguments{
\item{Out}{The destination data frame.}

\item{In}{The origin data frame.}

\item{Out.names}{A vector of n column names. The first is the name of the column in the destination df to match to the column in the origin df; the others are the names of the new columns created.}

\item{In.names}{A vector of n column names. The first is the name of the column in the origin df to match to the column in the destination df and to aggregate by; the others are the names of the columns to aggregate.}

\item{FUN}{The function to aggregate by.}

\item{Remove}{If set to TRUE (default), removes columns in the destination file which may have identical names. If not, a number is appended to the column names such that the new column names are not already present in the destination file.}

\item{Coerce}{Optional parameter: if set to TRUE, will attempt to output columns in the same format as the input. Default = FALSE.}
}
\description{
A function to add an aggregated column to an existing data frame.
Slated for phasing out and deletion: this is rather old and clumsy.
}
\examples{
pep <- col.aggr(Out = pep, In = ev, Out.names = c("Modified.sequence", "PEP"), In.names = c("Modified.sequence", "PEP"), FUN = function(x) {
  x <- proteoCraft::is.all.good(as.numeric(x))
  if (length(x) > 0) {
    return(min(x))
  } else {
    return(NA)
  }
})
# Result: pep now has a "PEP" column with PEP scores. Takes seconds or minutes where sapply takes hours.

}
